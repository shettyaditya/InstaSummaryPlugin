Usage: rapydscript input1.pyj [input2.pyj ...] 

Compile RapydScript files into javascript. You can either 
specify the input files on the command line or pipe a single
file into stdin.

If you specify no files and stdin is a terminal, a RapydScript
REPL will be started.

Options:
  --help, -h            show this help message and exit

  --version, -V         show the version and exit

  --output, -o          Output file (default STDOUT)

  --bare, -b            Remove the module wrapper that prevents RapydScript 
                        scope from bleeding into other JavaScript logic 

  --auto-bind, -i       Automatically bind function methods to functions 
                        themselves instead of using @bound decorator 
                        [experimental].

  --ecmascript6, -6, --es6
                        Build for ES6 instead of default (ES5). Adds support 
                        for additional features like generators and nested list 
                        unpacking [experimental].

  --beautify, -p, --prettify
                        Pretty print the generated javascript instead of 
                        minifying it.

  --omit-baselib, -m    Omit baselib functions. Use this if you have a 
                        different way of ensuring they're imported. Note
                        that simply including baselib.js is no longer
                        sufficient, as the polyfill functions have to be
                        executed and their result assigned to an appropriately
                        named variable.

  --test, -t            Run RapydScript tests and exit. You can specify the
                        name of individual test files to only run tests 
                        from those files. For example:
                        --test baselib functions

  --test-all, -T        Run full RapydScript test suite, including DOM 
                        tests and performance.

  --bench               Run performance benchmarks and exit. You can specify the
                        name of individual test files to only run tests 
                        from those files. For example:
                        --bench equality

  --self                Compile the compiler itself. It will only actually 
                        compile if something has changed since the last time 
                        it was called. To force a recompilation, simply 
                        delete lib/signatures.json

  --import-path, --imp  A list of paths in which to look for imported modules.
                        Multiple paths must be separated by the path separator 
                        (: on Unix and ; on Windows). You can also use the
                        environment variable RAPYDSCRIPT_PATH for this,
                        with identical syntax. Note that these directories
                        are searched before the builtin paths, which means you
                        can use them to replace builtin modules.

  --drop-decorators, --dd
                        A comma-separated list of decorators to drop during
                        compilation. This flag's purpose is to allow the user
                        to keep debug/test decorators in development and later
                        drop them in production.

  --drop-imports, --di  A comma-separated list of imports to drop during
                        compilation. This flag's purpose is to allow the user
                        to keep debug/test imports in development and later
                        drop them in production. This option can be
                        used together with drop_decorators.

  --drop-docstrings, --ds
                        If set, will drop all docstrings from the compilation,
                        useful for producing a smaller compilation.

  --comments            Preserve copyright comments in the output.
                        By default this works like Google Closure, keeping 
                        JSDoc-style comments that contain "@license" or 
                        "@preserve". You can optionally pass one of the 
                        following arguments to this flag:
                        - "all" to keep all comments
                        - a valid JS regexp (needs to start with a slash) to 
                        keep only comments that match.
                        
                        Note that currently not *all* comments can be kept 
                        when compression is on, because of dead code removal 
                        or cascading statements into sequences.

  --stats               Display run timings of various compilation steps in STD-
                        RR.

  --execute, -x, --exec Execute code in-place, after compiling it into memory.

  --lint, -l            Run the RapydScript linter and exit. This will
                        find various possible problems in the .pyj files
                        you specify and write messages about them to stdout.
                        The main check it performs is for unused/undefined 
                        symbols, like pyflakes does for python.

